Jacob Sayono
505368811
CS 32 Homework 5

1. Binary Search Tree Insertion and Traversal

a. The resulting tree after inserting the nodes 80, 68, 75, 15, 35, and 26 in that order would be:

            50
        /        \
      20           60
   /     \            \
 10       40           70
   \     /            /  \
   15   30           68  80
       /  \              /
      26  35            75

b. The output of inorder, preorder, and postorder traversals of the tree would be:

The preorder traversal of the tree would print: 50, 20, 10, 15, 40, 30, 26, 35, 60, 70, 68, 80, 75
The inorder traversal of the tree would print: 10, 15, 20, 26, 30, 35, 40, 50, 60, 68, 70, 75, 80
The postorder traversal of the tree would print: 15, 10, 26, 35, 30, 40, 20, 68, 75, 80, 70, 60, 50

c. The resulting BST after deleting the node 30 and then the node 20 would be:

        50
      /    \
    26      60
   /  \       \
 10    40      70
  \    /      /   \
  15  35     68   80
                 /
                75


                
2. Binary Tree with Parent Pointers

a. Struct definition for a binary tree node with child node pointers and a parent node pointer:

struct Node{
    Node(const int &myData) {
        data = myData;
        left = right = parent = nullptr;
    }
    int data;
    Node* left, *right, *parent;
};

b. Pseudocode for inserting a new node into a binary search tree with parent pointers:

void insert(const int& num):
if tree is empty,
    allocate a new node, let data = num
    point root ptr to new node
else start at root
while not done
    if num == current node's value
        return
    else if num < current node's value
        if current->left != nullptr
            current = current -> left
        else
            current->left = new Node(num)
            current->left->parent = current
            current = current->left
            current->right= null
            current->left = null
    else if num > current node's value
        if current->right != nullptr
            current = current -> right
        else
            current->right = new Node(num)
            current->right-> parent = current
            current = current->right
            current->right->left = null



3. Heap Operations

a. Heap after performing the given operations would be:

             7
           /   \
         5      6
        / \    /
       1   0  3

b. The heap from part a can be represented in an array as:

[7, 5, 6, 1, 0, 3]

c. After performing one more `h.remove(item);`, array would be:

[6, 5, 3, 1, 0]



4. Big-O Time Complexity of Data Structures

a. O(C + S)
b. O(logC + S)
c. O(logC + logS)
d. O(1 + logS)
e. O(1)
f. O(S + logC)
g. O(S * logC)
h. O(logS * C)